// Generated by CoffeeScript 2.0.0-beta6
void function () {
  var cache$, hasOwnProperty, mu, slice, toString;
  slice = Array.prototype.slice;
  cache$ = Object.prototype;
  toString = cache$.toString;
  hasOwnProperty = cache$.hasOwnProperty;
  module.exports = mu = {};
  mu.extend = function (obj) {
    slice.call(arguments, 1).forEach(function (source) {
      var key;
      for (key in source) {
        if (!isOwn$(source, key))
          continue;
        obj[key] = source[key];
      }
    });
    return obj;
  };
  mu.defaults = function (obj) {
    slice.call(arguments, 1).forEach(function (source) {
      var key;
      for (key in source) {
        if (!isOwn$(source, key))
          continue;
        if (!(null != obj[key]))
          obj[key] = source[key];
      }
    });
    return obj;
  };
  mu.clone = function (obj) {
    return mu.extend({}, obj);
  };
  mu.isArray = Array.isArray || function (obj) {
    return toString.call(obj) === '[object Array]';
  };
  mu.isObject = function (obj) {
    return obj === Object(obj);
  };
  (function () {
    return [
      'Arguments',
      'Date',
      'Function',
      'Number',
      'RegExp',
      'String'
    ].forEach(function (name) {
      return mu['is' + name] = function (obj) {
        return toString.call(obj) === '[object ' + name + ']';
      };
    });
  }());
  if (mu.isArguments(arguments) === false)
    mu.isArguments = function (obj) {
      return !!(obj && mu.has(obj, 'callee'));
    };
  if ('function' !== typeof /./)
    mu.isFunction = function (obj) {
      return 'function' === typeof obj;
    };
  mu.isBoolean = function (obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };
  mu.isEmpty = function (obj) {
    var key;
    if (!(null != obj))
      return true;
    if (mu.isArray(obj) || mu.isString(obj))
      return obj.length === 0;
    for (key in obj) {
      if (!isOwn$(obj, key))
        continue;
      return false;
    }
    return true;
  };
  mu.has = function (obj, key) {
    return hasOwnProperty.call(obj, key);
  };
  mu.first = mu.head = function (array, n) {
    if (null == n)
      n = 1;
    if (!(null != array))
      return;
    if (n === 1) {
      return array[0];
    } else {
      return array.slice(0, n);
    }
  };
  mu.last = function (array, n) {
    var len;
    if (null == n)
      n = 1;
    if (!(null != array))
      return;
    len = array.length;
    if (n === 1) {
      return array[len - 1];
    } else {
      return array.slice(len - n);
    }
  };
  mu.tail = mu.rest = function (array, n) {
    if (null == n)
      n = 1;
    if (null != array)
      return array.slice(n);
  };
  mu.partition = function (coll, fn) {
    var cache$1, falsy, key, obj, result, truthy, val;
    cache$1 = result = [
      [],
      []
    ];
    truthy = cache$1[0];
    falsy = cache$1[1];
    if (mu.isEmpty(coll))
      return result;
    if (mu.isArray(coll)) {
      for (var i$ = 0, length$ = coll.length; i$ < length$; ++i$) {
        obj = coll[i$];
        (fn(obj) ? truthy : falsy).push(obj);
      }
    } else {
      for (key in coll) {
        if (!isOwn$(coll, key))
          continue;
        val = coll[key];
        (fn(key, val) ? truthy : falsy).push([
          key,
          val
        ]);
      }
    }
    return result;
  };
  function isOwn$(o, p) {
    return {}.hasOwnProperty.call(o, p);
  }
}.call(this);
