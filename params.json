{"name":"Minutils","tagline":"Minimal utility methods for node and the browser","body":"# minutils\r\n\r\n[![Build Status](https://travis-ci.org/benjreinhart/minutils.png)](https://travis-ci.org/benjreinhart/minutils)\r\n\r\nMinimal utility methods for node and the browser.\r\n\r\n## How does one acquire this library?\r\n\r\nNode: `npm install minutils`. `require 'minutils'`\r\n\r\nBrowser: Copy either minutils.js or minutils.min.js (in the root of this repo) into your project. Inlcude on page. Then access it at `window.mu`.\r\n\r\n## Why not use underscore?\r\n\r\nBecause I don't necessarily need to bring in something the size of underscore in small projects. Because there may be methods in this library that aren't in underscore (or other libraries). Because it's fun. Because.\r\n\r\n## API\r\n\r\n#### Objects\r\n\r\n* [extend](#extend)\r\n* [defaults](#defaults)\r\n* [clone](#clone)\r\n* [isObject](#isObject)\r\n* [isArray](#isArray)\r\n* [isString](#isString)\r\n* [isNumber](#isNumber)\r\n* [isFunction](#isFunction)\r\n* [isArguments](#isArguments)\r\n* [isBoolean](#isBoolean)\r\n* [isRegExp](#isRegExp)\r\n* [isDate](#isDate)\r\n* [isEmpty](#isEmpty)\r\n* [has](#has)\r\n\r\n#### Strings\r\n\r\n* [isBlank](#isBlank)\r\n\r\n#### Arrays\r\n\r\n* [first](#first), [head](#head)\r\n* [last](#last)\r\n* [rest](#rest), [tail](#tail)\r\n\r\n#### Functions\r\n\r\n* [bind](#bind)\r\n\r\n#### Collections\r\n\r\n* [each](#each)\r\n* [map](#map)\r\n* [reduce](#reduce)\r\n* [partition](#partition)\r\n\r\n\r\n### Objects\r\n\r\n<a name=\"extend\" />\r\n##### extend(destination, objects*)\r\n\r\nCopies all properties from all `objects` into `destination`, replacing any existing properties of the same name.\r\n\r\n```javascript\r\nvar person = {name: 'Richard'}\r\nextend(person, {name: 'Lisa'}, {age: 124}, {alive: false})\r\n\r\nconsole.log(person) // {name: 'Lisa', age: 124, alive: false}\r\n```\r\n\r\n<a name=\"defaults\" />\r\n##### defaults(destination, objects*)\r\n\r\nTakes all properties from `objects` and copies them in to `destination` *only* if the properties are `undefined` in `destination`\r\n\r\n```javascript\r\nperson = {name: 'Richard'}\r\ndefaults(person, {name: 'Lisa'}, {age: 124}, {alive: false})\r\n\r\nconsole.log(person) // {name: 'Richard', age: 124, alive: false}\r\n```\r\n\r\n<a name=\"clone\" />\r\n##### clone(object)\r\n\r\nReturns a shallow copy of `object`.\r\n\r\n```javascript\r\nclone({attr: true}) // {attr: true}\r\n```\r\n\r\n<a name=\"isObject\" />\r\n##### isObject(object)\r\n\r\nDetermines whether `object` is an Object.\r\n\r\n```javascript\r\nisObject([]) // true\r\nisObject({}) // true\r\nisObject('') // false\r\n```\r\n\r\n<a name=\"isArray\" />\r\n##### isArray(object)\r\n\r\nIs the native `isArray` if exists. Determines whether an object is a real array.\r\n\r\n```javascript\r\nisArray(['first element']) // true\r\nisArray({'0': 'first element', length: 1}) // false\r\nisArray(arguments) // false\r\n```\r\n<a name=\"isString\" />\r\n##### isString(object)\r\n\r\nDetermines whether `object` is a String.\r\n\r\n```javascript\r\nisString('s') // true\r\nisString({'0': 's'}) // false\r\n```\r\n\r\n<a name=\"isNumber\" />\r\n##### isNumber(object)\r\n\r\nDetermines whether `object` is a Number.\r\n\r\n```javascript\r\nisNumber(10) // true\r\nisNumber('10') // false\r\n```\r\n\r\n<a name=\"isFunction\" />\r\n##### isFunction(object)\r\n\r\nDetermines whether `object` is a Function.\r\n\r\n```javascript\r\nisFunction(function(){}) // true\r\nisFunction({}) // false\r\n```\r\n\r\n<a name=\"isArguments\" />\r\n##### isArguments(object)\r\n\r\nDetermines whether `object` is the `arguments` object.\r\n\r\n```javascript\r\n(function(){\r\n  isArguments(arguments) // true\r\n  isArguments({}) //false\r\n})()\r\n```\r\n\r\n<a name=\"isBoolean\" />\r\n##### isBoolean\r\n\r\nDetermines whether `object` is a Boolean.\r\n\r\n```javascript\r\nisBoolean(true) // true\r\nisBoolean(false) // true\r\nisBoolean(true) // false\r\n```\r\n\r\n<a name=\"isRegExp\" />\r\n##### isRegExp(object)\r\n\r\nDetermines whether `object` is a RegExp.\r\n\r\n```javascript\r\nisRegExp(//) // true\r\nisRegExp(10) // false\r\n```\r\n\r\n<a name=\"isDate\" />\r\n##### isDate(object)\r\n\r\nDetermines whether `object` is a Date.\r\n\r\n```javascript\r\nisDate(new Date) // true\r\nisDate(10) // false\r\n```\r\n\r\n<a name=\"isEmpty\" />\r\n##### isEmpty(object)\r\n\r\nDetermines whether `object` has any values.\r\n\r\n```javascript\r\nisEmpty(null) // true\r\nisEmpty(undefined) // true\r\nisEmpty({}) // true\r\nisEmpty([]) // true\r\nisEmpty('') // true\r\n\r\nisEmpty({key: 'val'}) // false\r\nisEmpty([1]) // false\r\nisEmpty('string') // false\r\n```\r\n\r\n<a name=\"has\" />\r\n##### has(object, key)\r\n\r\nDetermines whether `object` has own `key`.\r\n\r\n```javascript\r\nhas({toString: ''}, 'toString') // true\r\nhas({}, 'toString') // false\r\n```\r\n\r\n### Strings\r\n\r\n<a name=\"isBlank\" />\r\n##### isBlank(string)\r\n\r\nIs `true` if a `string` contains only whitespace characters.\r\n\r\n```javascript\r\nisBlank('') // true\r\nisBlank('         ') // true\r\nisBlank('\\n\\t\\r \\t \\t \\n \\n  \\r') // true\r\n\r\nisBlank('      c   ') // false\r\n```\r\n\r\n### Arrays\r\n\r\n<a name=\"first\" />\r\n<a name=\"head\" />\r\n##### first(array, n = 1)\r\n\r\nAlias: `head`\r\n\r\nReturns the first `n` elements of array or the first element if `n` is 1 (the default).\r\n\r\n```javascript\r\nfirst([1, 2, 3, 4, 5]) // 1\r\nfirst([1, 2, 3, 4, 5], 3) // [1, 2, 3]\r\n```\r\n\r\n<a name=\"last\" />\r\n##### last(array, n = 1)\r\n\r\nReturns the last `n` elements of the array or the last element of the array if `n` is 1 (the default).\r\n\r\n```javascript\r\nlast([1, 2, 3, 4, 5]) // 5\r\nlast([1, 2, 3, 4, 5], 3) // [3, 4, 5]\r\n```\r\n\r\n<a name=\"rest\" />\r\n<a name=\"tail\" />\r\n##### rest(array, n = 1)\r\n\r\nAlias: `tail`\r\n\r\nReturns the rest of the array starting at index `n` (default is 1).\r\n\r\n```javascript\r\nrest([1, 2, 3, 4, 5]) // [2, 3, 4, 5]\r\nrest([1, 2, 3, 4, 5], 3) // [4, 5]\r\n```\r\n\r\n### Functions\r\n\r\n<a name=\"bind\" />\r\n##### bind(fn, object[, defaults*])\r\n\r\nReturns a function which will always call `fn` with a `this` value of `object`. Optionally accepts default arguments and will return a partially applied function.\r\n\r\n```javascript\r\nvar obj = {name: 'the dude!'}\r\n\r\nfn = function(greeting, greeting2){\r\n  return greeting + ' ' + greeting2 + ' ' + this.name\r\n}\r\n\r\nfn('hello', 'hi') // 'hello hi '\r\n\r\nbind(fn, obj)('hello', 'hi') // 'hello hi the dude!'\r\nbind(fn, obj, 'hello')('hi') // 'hello hi the dude!'\r\nbind(fn, obj, 'hello', 'hi')() // 'hello hi the dude!'\r\n```\r\n\r\n\r\n### Collections\r\n\r\n<a name=\"each\" />\r\n##### each(coll, fn[, context])\r\n\r\nApplies `fn` to each element in `coll`. Returns `undefined`. `context` is `fn`'s `this` value.\r\n\r\nIf `coll` is an array, `fn` will be called with `(element, index, coll)`. If `coll` is a JavaScript object, then `fn` will be called with `(value, key, coll)`.\r\n\r\n```javascript\r\neach([1, 2, 3], console.log, console)\r\n/*\r\n  1 0 [1, 2, 3]\r\n  2 1 [1, 2, 3]\r\n  3 2 [1, 2, 3]\r\n*/\r\neach({one: 1, two: 2, three: 3}, console.log, console)\r\n/*\r\n  1 'one' {one: 1, two: 2, three: 3}\r\n  2 'two' {one: 1, two: 2, three: 3}\r\n  3 'three' {one: 1, two: 2, three: 3}\r\n*/\r\n```\r\n\r\n<a name=\"map\" />\r\n##### map(coll, fn[, context])\r\n\r\nReturns an array of the return values of applying `fn` to each element in `coll`.\r\n\r\nIf `coll` is an array, `fn` will be called with `(element, index, coll)`. If `coll` is a JavaScript object, then `fn` will be called with `(value, key, coll)`.\r\n\r\n```javascript\r\nvar square = function(n) {return n*n}\r\nmap([2, 4], square) // [4, 16]\r\nmap({two: 2, four: 4}, square) // [4, 16]\r\n```\r\n\r\n<a name=\"reduce\" />\r\n##### reduce(coll, fn[, memo[, context]])\r\n\r\nReturns a single value from a list of values.\r\n\r\nIf `coll` is an array, `fn` will be called with `(memo, element, index, coll)`. If `coll` is a JavaScript object, then `fn` will be called with `(memo, value, key, coll)`.\r\n\r\n```javascript\r\nvar sum = function(x, y){return x+y}\r\nreduce([1, 2, 3], sum, 0) // 6\r\nreduce({one: 1, two: 2, three: 3}, sum, 0) // 6\r\n```\r\n\r\n<a name=\"partition\" />\r\n##### partition(coll, fn[, context])\r\n\r\nFor Array, String and Arguments objects, returns an array containing two arrays. For Anything other than Array, String or Arguments objects, returns an array of two objects. The first array or object contains all the values which the `fn` evalutates as truthy, the second contains the rest.\r\n\r\nIf `coll` is an array, `fn` will be called with `(element, index, coll)`. If `coll` is a JavaScript object, then `fn` will be called with `(value, key, coll)`.\r\n\r\n```javascript\r\nvar isEven = function(n) {return n % 2 == 0};\r\npartition([1, 2, 3, 4, 5], isEven) // [[2, 4], [1, 3, 5]]\r\n\r\nconsole.log(partition({one: 1, two: 2, three: 3}, isEven))\r\n/*\r\n  [\r\n    {two: 2},\r\n    {one: 1, three: 3}\r\n  ]\r\n*/\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}