// Generated by CommonJS Everywhere 0.9.2
(function (global) {
  function require(file, parentModule) {
    if ({}.hasOwnProperty.call(require.cache, file))
      return require.cache[file];
    var resolved = require.resolve(file);
    if (!resolved)
      throw new Error('Failed to resolve module ' + file);
    var module$ = {
        id: file,
        require: require,
        filename: file,
        exports: {},
        loaded: false,
        parent: parentModule,
        children: []
      };
    if (parentModule)
      parentModule.children.push(module$);
    var dirname = file.slice(0, file.lastIndexOf('/') + 1);
    require.cache[file] = module$.exports;
    resolved.call(module$.exports, module$, module$.exports, dirname, file);
    module$.loaded = true;
    return require.cache[file] = module$.exports;
  }
  require.modules = {};
  require.cache = {};
  require.resolve = function (file) {
    return {}.hasOwnProperty.call(require.modules, file) ? require.modules[file] : void 0;
  };
  require.define = function (file, fn) {
    require.modules[file] = fn;
  };
  var process = function () {
      var cwd = '/';
      return {
        title: 'browser',
        version: 'v0.8.25',
        browser: true,
        env: {},
        argv: [],
        nextTick: global.setImmediate || function (fn) {
          setTimeout(fn, 0);
        },
        cwd: function () {
          return cwd;
        },
        chdir: function (dir) {
          cwd = dir;
        }
      };
    }();
  require.define('/lib/index.js', function (module, exports, __dirname, __filename) {
    void function () {
      var slice, toString, utils;
      slice = Array.prototype.slice;
      toString = Object.prototype.toString;
      module.exports = utils = {
        extend: function (obj) {
          slice.call(arguments, 1).forEach(function (source) {
            var key;
            for (key in source) {
              if (!isOwn$(source, key))
                continue;
              obj[key] = source[key];
            }
          });
          return obj;
        },
        defaults: function (obj) {
          slice.call(arguments, 1).forEach(function (source) {
            var key;
            for (key in source) {
              if (!isOwn$(source, key))
                continue;
              if (!(null != obj[key]))
                obj[key] = source[key];
            }
          });
          return obj;
        },
        clone: function (obj) {
          return utils.extend({}, obj);
        },
        isArray: Array.isArray,
        isObject: function (obj) {
          return obj === Object(obj);
        },
        isString: function (obj) {
          return toString.call(obj) === '[object String]';
        },
        isEmpty: function (obj) {
          var key;
          if (!(null != obj))
            return true;
          if (utils.isArray(obj) || utils.isString(obj))
            return obj.length === 0;
          for (key in obj) {
            if (!isOwn$(obj, key))
              continue;
            return false;
          }
          return true;
        },
        partition: function (array, fn) {
          var cache$, falsy, obj, result, truthy;
          cache$ = result = [
            [],
            []
          ];
          truthy = cache$[0];
          falsy = cache$[1];
          if (!array.length)
            return result;
          for (var i$ = 0, length$ = array.length; i$ < length$; ++i$) {
            obj = array[i$];
            (fn(obj) ? truthy : falsy).push(obj);
          }
          return result;
        }
      };
      function isOwn$(o, p) {
        return {}.hasOwnProperty.call(o, p);
      }
    }.call(this);
  });
  global.mu = require('/lib/index.js');
}.call(this, this));